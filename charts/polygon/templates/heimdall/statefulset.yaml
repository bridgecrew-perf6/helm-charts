{{- $values := $.Values.heimdall }}
{{- $componentName := "heimdall" }}
{{- $componentLabel := include "polygon.componentLabelFor" $componentName }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "polygon.fullname" . }}-{{ $componentName }}
  labels:
    {{- include "polygon.labels" . | nindent 4 }}
    {{- $componentLabel | nindent 4 }}
spec:
  serviceName: {{ include "polygon.fullname" . }}-{{ $componentName }}-headless
  replicas: {{ $values.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "polygon.selectorLabels" . | nindent 6 }}
      {{- $componentLabel | nindent 6 }}
  volumeClaimTemplates: # TODO support using an existing PV/PVC?
    - metadata:
        name: storage
      spec:
        {{- toYaml $values.volumeClaimSpec | nindent 8 }}
  template:
    metadata:
      {{- with $values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "polygon.selectorLabels" . | nindent 8 }}
        {{- $componentLabel | nindent 8 }}
    spec:
      {{- with $values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "polygon.serviceAccountName" . }}
      {{- with $values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ $values.terminationGracePeriodSeconds | default "60" }}
      volumes:
        - name: tmp # this is to provide a writable /tmp even with securityContext.readOnlyRootFilesystem=true
          emptyDir: {}
      containers:
        - name: {{ .Chart.Name }}-{{ $componentName }}
          image: "{{ $values.image.repository }}:{{ $values.image.tag }}"
          imagePullPolicy: {{ $values.image.pullPolicy }}
          # securityContext:
          #   readOnlyRootFilesystem: false
          #   capabilities:
          #     drop:
          #       - ALL
          # command: ["sh", "-c", "HEIMDALL_DIR=/storage /root/heimdall/docker/entrypoint.sh start"]
          command:
            - sh
            - -c
            - >-
              set -x;

              export HEIMDALL_DIR=/storage;

              /root/heimdall/docker/entrypoint.sh start \
                {{- range $arg := $values.extraArgs }}
                  {{- $arg  | nindent 16 }} \
                {{- end }}
                --rpc.laddr=tcp://0.0.0.0:26657
          ports:
            # - name: http-metrics #Â TODO figure out metrics scraping, potentially with exporter sidecar, but hopefully its builtin
            #   containerPort: 6060
            #   protocol: TCP
            - name: http-rpc
              containerPort: 26657
              protocol: TCP
            - name: udp-p2p
              containerPort: 26656 
              protocol: UDP
            - name: tcp-p2p
              protocol: TCP
              containerPort: 26656
          volumeMounts:
            - name: storage
              mountPath: /storage
            - name: tmp
              mountPath: /tmp
          # readinessProbe:
          #   # This currently requires GRPCContainerProbe feature gate to be enabled on the kubelet
          #   # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-a-grpc-liveness-probe
          #   # https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/
          #   grpc:
          #     port: 9090 # named ports not supported yet by grpc probes
          {{- with $values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with $values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or $values.affinity $values.affinityPresets.antiAffinityByHostname }}
      affinity:
      {{- with $values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $values.affinityPresets.antiAffinityByHostname }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - {{ $.Release.Name }}
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - {{ $componentName }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- end }}
      {{- with $values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
